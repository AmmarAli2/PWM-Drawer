
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  0000050a  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001480  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000945  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b80  00000000  00000000  00002691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c5  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad7  00000000  00000000  000039b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 34       	cpi	r26, 0x40	; 64
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e4       	ldi	r26, 0x40	; 64
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 34       	cpi	r26, 0x40	; 64
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 
#include "main.h"

int main(void)
{
	PWM0_Fast_Initialize();
  92:	0e 94 42 02 	call	0x484	; 0x484 <PWM0_Fast_Initialize>
	GLCD_Initialize();
  96:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <GLCD_Initialize>
	int i=Ds/10;
	int j=Ds%10;
	char D=i+'0';
	char s=j+'0';

	PWM0_Fast_SetDutyCycle(Ds);
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <PWM0_Fast_SetDutyCycle>
		
		GLCD_ClearAll();
  a0:	0e 94 25 01 	call	0x24a	; 0x24a <GLCD_ClearAll>
		GLCD_Char(0,'D');
  a4:	64 e4       	ldi	r22, 0x44	; 68
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'U');
  b0:	65 e5       	ldi	r22, 0x55	; 85
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'T');
  bc:	64 e5       	ldi	r22, 0x54	; 84
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'Y');
  c8:	69 e5       	ldi	r22, 0x59	; 89
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'C');
  d4:	63 e4       	ldi	r22, 0x43	; 67
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'Y');
  e0:	69 e5       	ldi	r22, 0x59	; 89
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'C');
  ec:	63 e4       	ldi	r22, 0x43	; 67
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'L');
  f8:	6c e4       	ldi	r22, 0x4C	; 76
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'E');
 104:	65 e4       	ldi	r22, 0x45	; 69
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,'=');	
 110:	6d e3       	ldi	r22, 0x3D	; 61
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,D);
 11c:	62 e3       	ldi	r22, 0x32	; 50
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(0,s);
 128:	60 e3       	ldi	r22, 0x30	; 48
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,' ');
 134:	60 e2       	ldi	r22, 0x20	; 32
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'F');
 140:	66 e4       	ldi	r22, 0x46	; 70
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'=');
 14c:	6d e3       	ldi	r22, 0x3D	; 61
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'1');
 158:	61 e3       	ldi	r22, 0x31	; 49
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'2');
 164:	62 e3       	ldi	r22, 0x32	; 50
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'M');
 170:	6d e4       	ldi	r22, 0x4D	; 77
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'H');
 17c:	68 e4       	ldi	r22, 0x48	; 72
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Char(1,'z');
 188:	6a e7       	ldi	r22, 0x7A	; 122
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 4d 01 	call	0x29a	; 0x29a <GLCD_Char>
		GLCD_Wave(5,Ds);
 194:	64 e1       	ldi	r22, 0x14	; 20
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 88 01 	call	0x310	; 0x310 <GLCD_Wave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	83 ed       	ldi	r24, 0xD3	; 211
 1a4:	90 e3       	ldi	r25, 0x30	; 48
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x114>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x11e>
 1b0:	00 00       	nop
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x120>

000001b4 <GLCD_Command>:
	GLCD_Command(0x3F);		/* Display ON */
}

void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;		/* Copy command on data pin */
 1b4:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 bb       	out	0x15, r24	; 21
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <GLCD_Command+0x16>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <GLCD_Command+0x1c>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 1d0:	85 b3       	in	r24, 0x15	; 21
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	85 bb       	out	0x15, r24	; 21
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <GLCD_Command+0x24>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <GLCD_Command+0x2a>
 1de:	08 95       	ret

000001e0 <GLCD_Initialize>:
#include "GLCD_Private.h"
#include "Fonts.h"

void GLCD_Initialize()			/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
 1e4:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	88 63       	ori	r24, 0x38	; 56
 1ea:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	89 ef       	ldi	r24, 0xF9	; 249
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <GLCD_Initialize+0x12>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <GLCD_Initialize+0x1c>
 1fc:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 1fe:	8e e3       	ldi	r24, 0x3E	; 62
 200:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 20a:	88 eb       	ldi	r24, 0xB8	; 184
 20c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 210:	80 ec       	ldi	r24, 0xC0	; 192
 212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
 21c:	08 95       	ret

0000021e <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)		/* GLCD data function */
{
	Data_Port = Data;		/* Copy data on data pin */
 21e:	8b bb       	out	0x1b, r24	; 27
	Command_Port |= (1 << RS);	/* Make RS HIGH for data register */
 220:	85 b3       	in	r24, 0x15	; 21
 222:	81 60       	ori	r24, 0x01	; 1
 224:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
 226:	85 b3       	in	r24, 0x15	; 21
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	85 bb       	out	0x15, r24	; 21
	Command_Port |= (1 << EN);	/* HIGH-LOW transition on Enable */
 22c:	85 b3       	in	r24, 0x15	; 21
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8a e1       	ldi	r24, 0x1A	; 26
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <GLCD_Data+0x16>
 238:	00 c0       	rjmp	.+0      	; 0x23a <GLCD_Data+0x1c>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	85 bb       	out	0x15, r24	; 21
 240:	8a e1       	ldi	r24, 0x1A	; 26
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <GLCD_Data+0x24>
 246:	00 c0       	rjmp	.+0      	; 0x248 <GLCD_Data+0x2a>
 248:	08 95       	ret

0000024a <GLCD_ClearAll>:
}



void GLCD_ClearAll()			
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 252:	85 b3       	in	r24, 0x15	; 21
 254:	88 61       	ori	r24, 0x18	; 24
 256:	85 bb       	out	0x15, r24	; 21
	for(i = 0; i < TotalPage; i++)
 258:	00 e0       	ldi	r16, 0x00	; 0
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	10 c0       	rjmp	.+32     	; 0x27e <GLCD_ClearAll+0x34>
	{
		GLCD_Command((0xB8) + i);/* Increment page */
 25e:	88 eb       	ldi	r24, 0xB8	; 184
 260:	80 0f       	add	r24, r16
 262:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
		for(j = 0; j < 64; j++)
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	04 c0       	rjmp	.+8      	; 0x274 <GLCD_ClearAll+0x2a>
		{
			GLCD_Data(0);	
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	c0 34       	cpi	r28, 0x40	; 64
 276:	d1 05       	cpc	r29, r1
 278:	cc f3       	brlt	.-14     	; 0x26c <GLCD_ClearAll+0x22>
void GLCD_ClearAll()			
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 27a:	0f 5f       	subi	r16, 0xFF	; 255
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	08 30       	cpi	r16, 0x08	; 8
 280:	11 05       	cpc	r17, r1
 282:	6c f3       	brlt	.-38     	; 0x25e <GLCD_ClearAll+0x14>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 28a:	88 eb       	ldi	r24, 0xB8	; 184
 28c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <GLCD_Char>:


void GLCD_Char(char page_no, char character)
{
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
		unsigned int Page = ((0xB8) + page_no);
		int i=((character-32)*5);
 2a2:	c6 2f       	mov	r28, r22
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	be 01       	movw	r22, r28
 2a8:	60 52       	subi	r22, 0x20	; 32
 2aa:	71 09       	sbc	r23, r1
 2ac:	eb 01       	movw	r28, r22
 2ae:	cc 0f       	add	r28, r28
 2b0:	dd 1f       	adc	r29, r29
 2b2:	cc 0f       	add	r28, r28
 2b4:	dd 1f       	adc	r29, r29
 2b6:	c6 0f       	add	r28, r22
 2b8:	d7 1f       	adc	r29, r23
		int j=i+5;
 2ba:	8e 01       	movw	r16, r28
 2bc:	0b 5f       	subi	r16, 0xFB	; 251
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
		Command_Port |= (1 << CS2);	/* Select Left half of display */
 2c0:	95 b3       	in	r25, 0x15	; 21
 2c2:	90 61       	ori	r25, 0x10	; 16
 2c4:	95 bb       	out	0x15, r25	; 21
		Command_Port &= ~(1 << CS1);
 2c6:	95 b3       	in	r25, 0x15	; 21
 2c8:	97 7f       	andi	r25, 0xF7	; 247
 2ca:	95 bb       	out	0x15, r25	; 21
		GLCD_Command(Page);
 2cc:	88 54       	subi	r24, 0x48	; 72
 2ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
		
	
	DIO_SetPinValue(DIO_PORTC, DIO_PIN0, DIO_HIGH);//Choose Data Register
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC, DIO_PIN1, DIO_LOW);//Choose Write on LCD
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC, DIO_PIN2, DIO_LOW);//EN low
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_SetPinValue>

for(int x=i; x<j; x++)
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <GLCD_Char+0x66>
	GLCD_Data(font5x8[x]);
 2f2:	fe 01       	movw	r30, r28
 2f4:	e0 5a       	subi	r30, 0xA0	; 160
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	80 81       	ld	r24, Z
 2fa:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
	
	DIO_SetPinValue(DIO_PORTC, DIO_PIN0, DIO_HIGH);//Choose Data Register
	DIO_SetPinValue(DIO_PORTC, DIO_PIN1, DIO_LOW);//Choose Write on LCD
	DIO_SetPinValue(DIO_PORTC, DIO_PIN2, DIO_LOW);//EN low

for(int x=i; x<j; x++)
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	c0 17       	cp	r28, r16
 302:	d1 07       	cpc	r29, r17
 304:	b4 f3       	brlt	.-20     	; 0x2f2 <GLCD_Char+0x58>
	GLCD_Data(font5x8[x]);
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <GLCD_Wave>:
void GLCD_Wave(char page_no, uint8_t Ds)  /* Display Duty Cycle Waveform */
{
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
			int j=(Ds/10); 
 31c:	0d ec       	ldi	r16, 0xCD	; 205
 31e:	60 9f       	mul	r22, r16
 320:	01 2d       	mov	r16, r1
 322:	11 24       	eor	r1, r1
 324:	06 95       	lsr	r16
 326:	06 95       	lsr	r16
 328:	06 95       	lsr	r16
 32a:	10 e0       	ldi	r17, 0x00	; 0
			unsigned int Page = ((0xB8) + page_no);
			Command_Port |= (1 << CS2);	/* Select Left half of display */
 32c:	95 b3       	in	r25, 0x15	; 21
 32e:	90 61       	ori	r25, 0x10	; 16
 330:	95 bb       	out	0x15, r25	; 21
			Command_Port &= ~(1 << CS1);
 332:	95 b3       	in	r25, 0x15	; 21
 334:	97 7f       	andi	r25, 0xF7	; 247
 336:	95 bb       	out	0x15, r25	; 21
			GLCD_Command(Page);
 338:	88 54       	subi	r24, 0x48	; 72
 33a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GLCD_Command>
			
	for(int x=0;x<5;x++)			/*Repeat cycle 5 times*/
 33e:	e1 2c       	mov	r14, r1
 340:	f1 2c       	mov	r15, r1
 342:	24 c0       	rjmp	.+72     	; 0x38c <GLCD_Wave+0x7c>
	{
	GLCD_Data(0x00);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
	for(int i=0;i<(10-j);i++)
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	04 c0       	rjmp	.+8      	; 0x358 <GLCD_Wave+0x48>
	{
		GLCD_Data(0x7F);
 350:	8f e7       	ldi	r24, 0x7F	; 127
 352:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
			GLCD_Command(Page);
			
	for(int x=0;x<5;x++)			/*Repeat cycle 5 times*/
	{
	GLCD_Data(0x00);
	for(int i=0;i<(10-j);i++)
 356:	21 96       	adiw	r28, 0x01	; 1
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	80 1b       	sub	r24, r16
 35e:	91 0b       	sbc	r25, r17
 360:	c8 17       	cp	r28, r24
 362:	d9 07       	cpc	r29, r25
 364:	ac f3       	brlt	.-22     	; 0x350 <GLCD_Wave+0x40>
	{
		GLCD_Data(0x7F);
	}
	GLCD_Data(0x00);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
	for(int i=0;i<j;i++)
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	04 c0       	rjmp	.+8      	; 0x37a <GLCD_Wave+0x6a>
	{
		GLCD_Data(0xFE);
 372:	8e ef       	ldi	r24, 0xFE	; 254
 374:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
	for(int i=0;i<(10-j);i++)
	{
		GLCD_Data(0x7F);
	}
	GLCD_Data(0x00);
	for(int i=0;i<j;i++)
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	c0 17       	cp	r28, r16
 37c:	d1 07       	cpc	r29, r17
 37e:	cc f3       	brlt	.-14     	; 0x372 <GLCD_Wave+0x62>
	{
		GLCD_Data(0xFE);
	}
	GLCD_Data(0x00);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 0f 01 	call	0x21e	; 0x21e <GLCD_Data>
			unsigned int Page = ((0xB8) + page_no);
			Command_Port |= (1 << CS2);	/* Select Left half of display */
			Command_Port &= ~(1 << CS1);
			GLCD_Command(Page);
			
	for(int x=0;x<5;x++)			/*Repeat cycle 5 times*/
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	e8 1a       	sub	r14, r24
 38a:	f8 0a       	sbc	r15, r24
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	e8 16       	cp	r14, r24
 390:	f1 04       	cpc	r15, r1
 392:	c4 f2       	brlt	.-80     	; 0x344 <GLCD_Wave+0x34>
	{
		GLCD_Data(0xFE);
	}
	GLCD_Data(0x00);
	}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	08 95       	ret

000003a2 <DIO_SetPinValue>:
	}
}
//To define state (High/Low)
void DIO_SetPinValue(port Port, pin Pin, state State)
{
	switch(State)
 3a2:	44 23       	and	r20, r20
 3a4:	19 f0       	breq	.+6      	; 0x3ac <DIO_SetPinValue+0xa>
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	c9 f1       	breq	.+114    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3aa:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 f0       	breq	.+36     	; 0x3d4 <DIO_SetPinValue+0x32>
 3b0:	28 f0       	brcs	.+10     	; 0x3bc <DIO_SetPinValue+0x1a>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	d9 f0       	breq	.+54     	; 0x3ec <DIO_SetPinValue+0x4a>
 3b6:	83 30       	cpi	r24, 0x03	; 3
 3b8:	29 f1       	breq	.+74     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ba:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 3bc:	2b b3       	in	r18, 0x1b	; 27
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_SetPinValue+0x26>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_SetPinValue+0x22>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	8b bb       	out	0x1b, r24	; 27
			break;
 3d2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB , Pin);
 3d4:	28 b3       	in	r18, 0x18	; 24
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinValue+0x3e>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinValue+0x3a>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	88 bb       	out	0x18, r24	; 24
			break;
 3ea:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 3ec:	25 b3       	in	r18, 0x15	; 21
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPinValue+0x56>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPinValue+0x52>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	85 bb       	out	0x15, r24	; 21
			break;
 402:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 404:	22 b3       	in	r18, 0x12	; 18
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	82 bb       	out	0x12, r24	; 18
			break;
 41a:	08 95       	ret
			//#warning "Port or Pin Not Correcrt"
			break;
		}
		break;
		case DIO_HIGH:
		switch (Port)
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	89 f0       	breq	.+34     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 420:	28 f0       	brcs	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	c9 f0       	breq	.+50     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	11 f1       	breq	.+68     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 42a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 42c:	2b b3       	in	r18, 0x1b	; 27
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	8b bb       	out	0x1b, r24	; 27
			break;
 440:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB , Pin);
 442:	28 b3       	in	r18, 0x18	; 24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	82 2b       	or	r24, r18
 454:	88 bb       	out	0x18, r24	; 24
			break;
 456:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 458:	25 b3       	in	r18, 0x15	; 21
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	85 bb       	out	0x15, r24	; 21
			break;
 46c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 46e:	22 b3       	in	r18, 0x12	; 18
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	82 2b       	or	r24, r18
 480:	82 bb       	out	0x12, r24	; 18
 482:	08 95       	ret

00000484 <PWM0_Fast_Initialize>:
{
	SET_BIT(TCCR0, CS02);CLR_BIT(TCCR0, CS01);CLR_BIT(TCCR0, CS00);
}
void PWM0_Fast_Stop(void)
{
	CLR_BIT(TCCR0, CS02);CLR_BIT(TCCR0, CS01);CLR_BIT(TCCR0, CS00);
 484:	87 b3       	in	r24, 0x17	; 23
 486:	88 60       	ori	r24, 0x08	; 8
 488:	87 bb       	out	0x17, r24	; 23
 48a:	83 b7       	in	r24, 0x33	; 51
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	83 bf       	out	0x33, r24	; 51
 490:	83 b7       	in	r24, 0x33	; 51
 492:	80 64       	ori	r24, 0x40	; 64
 494:	83 bf       	out	0x33, r24	; 51
 496:	83 b7       	in	r24, 0x33	; 51
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	83 bf       	out	0x33, r24	; 51
 49c:	83 b7       	in	r24, 0x33	; 51
 49e:	8f 7e       	andi	r24, 0xEF	; 239
 4a0:	83 bf       	out	0x33, r24	; 51
 4a2:	08 95       	ret

000004a4 <PWM0_Fast_SetDutyCycle>:
}
void PWM0_Fast_SetDutyCycle(uint8_t dutycycle)
{
	#if PWM0_Mode == PWM0_NonInverting
	OCR0 = ((BITS * dutycycle) / 100) - 1;
 4a4:	98 2f       	mov	r25, r24
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	64 e6       	ldi	r22, 0x64	; 100
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divmodhi4>
 4b0:	61 50       	subi	r22, 0x01	; 1
 4b2:	6c bf       	out	0x3c, r22	; 60
 4b4:	08 95       	ret

000004b6 <__divmodhi4>:
 4b6:	97 fb       	bst	r25, 7
 4b8:	07 2e       	mov	r0, r23
 4ba:	16 f4       	brtc	.+4      	; 0x4c0 <__divmodhi4+0xa>
 4bc:	00 94       	com	r0
 4be:	07 d0       	rcall	.+14     	; 0x4ce <__divmodhi4_neg1>
 4c0:	77 fd       	sbrc	r23, 7
 4c2:	09 d0       	rcall	.+18     	; 0x4d6 <__divmodhi4_neg2>
 4c4:	0e 94 6f 02 	call	0x4de	; 0x4de <__udivmodhi4>
 4c8:	07 fc       	sbrc	r0, 7
 4ca:	05 d0       	rcall	.+10     	; 0x4d6 <__divmodhi4_neg2>
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__divmodhi4_exit>

000004ce <__divmodhi4_neg1>:
 4ce:	90 95       	com	r25
 4d0:	81 95       	neg	r24
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	08 95       	ret

000004d6 <__divmodhi4_neg2>:
 4d6:	70 95       	com	r23
 4d8:	61 95       	neg	r22
 4da:	7f 4f       	sbci	r23, 0xFF	; 255

000004dc <__divmodhi4_exit>:
 4dc:	08 95       	ret

000004de <__udivmodhi4>:
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	51 e1       	ldi	r21, 0x11	; 17
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <__udivmodhi4_ep>

000004e6 <__udivmodhi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a6 17       	cp	r26, r22
 4ec:	b7 07       	cpc	r27, r23
 4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__udivmodhi4_ep>
 4f0:	a6 1b       	sub	r26, r22
 4f2:	b7 0b       	sbc	r27, r23

000004f4 <__udivmodhi4_ep>:
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	5a 95       	dec	r21
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__udivmodhi4_loop>
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	bc 01       	movw	r22, r24
 502:	cd 01       	movw	r24, r26
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
